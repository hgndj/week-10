%{
#include&lt;stdio.h&gt;
%}
%token NUMBER
%%
S: E { printf(&quot;The result is =%d\n&quot;,$1);}
;
E: E&#39;+&#39;T { $$ = $1 + $3; }
| T { $$ = $1;}
;
T: T&#39;*&#39;F { $$ = $1 * $3; }
| F { $$ = $1;}

;
F: &#39;(&#39;E&#39;)&#39; { $$ = $2;}
| NUMBER { $$ = $1;}
;
%%
int main(){
yyparse();
}
int yywrap(){
return 1;
}
void yyerror(char *s){
printf(&quot;Error %s&quot;,s);
}
14
%{
#include&lt;stdio.h&gt;
%}
%token DIGIT
%left &#39;-&#39; &#39;+&#39;
%left &#39;*&#39; &#39;/&#39;
%nonassoc UMINUS
%%
S: E { printf(&quot;The result is =%d\n&quot;,$1);}
;
E: E&#39;+&#39;E { $$ = $1 + $3; }
| E&#39;-&#39;E { $$ = $1 - $3; }
| E&#39;*&#39;E { $$ = $1 * $3; }
| E&#39;/&#39;E { if($3 == 0)

yyerror(&quot;Divide by zero&quot;);

else
$$ = $1 / $3; }
| &#39;-&#39;E %prec UMINUS { $$ = -$2; }
| &#39;(&#39; E &#39;)&#39; { $$ = $2; }
| DIGIT {$$ = $1;}
;
%%
int main()
{
yyparse();
}
int yywrap(){
return 1;
}
void yyerror(char *s){
printf(&quot;Error %s&quot;,s);exit(0);
}
